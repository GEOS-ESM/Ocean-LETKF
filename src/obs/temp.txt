/* the vertical temperature gradient is rescaled to vary between 0.0 and 1.0
   so to set the std errors ultimately between 1.0 and 2.5 use
     SE0 = 1.0 and SEF = 1.5
   then EVR = 1/(se*se)
   if std error = 0.5, then EVR = 4.0
                  1.0             1.0
                  1.5             0.4444
*/

#define SE0 1.0
#define SEF 1.5

// Compute the gradient of t at the model levels. Also perform some other computations
        // tz is the scaling to apply to the se error profiles
        // a alternates between the temperature and the temperature error
        if (do_comp_se) {
          cmpTz();
        }
        // tz is used only for scaling the standard deviation (error) by depth, so it's not needed
        // if the observational errors are read in from the netcdf obs file

for (k = 0; k < kd; k++) {
            *(a+2*k) = *(t+k);
            if (*(t+k) != spv) {
              // specify the standard deviation (obs error)
              if (do_comp_se) {
                se = se0 + seF * *(tz+k);
              } else {
                // NOTE: for the synthetic observations, this should be read in:
                se = *(ew+k);
              }
              *(a+2*k+1) = 1.0 / (se*se);
            } else {
              *(a+2*k+1) = 0.0;
            }
}

/* -------------------------------------------------------------- */

void cmpTz()
{
  int k, kk, km, kp, kv2, cnt;
  float tzmn, tzmx;

  // Estimate temperature gradients
  // i.e. every level is linearly fit from below and above
  for (k = 1; k < kd-1; k++) {
    if (*(t+k-1) != spv && *(t+k+1) != spv) {
      // Estimate temperature gradient
      *(tz+k) = (*(t+k-1) - *(t+k+1)) / (*(z+k+1) - *(z+k-1));
      // enforce non-negative temperature gradient
      if (*(tz+k) < 0.0) *(tz+k) = 0.0;
    } else {
      *(tz+k) = spv;
    }
  }
  *tz = spv;
  *(tz+kd-1) = spv;
  // For all levels with obs data,
  for (k = 0; k < kd; k++) {
    // if one of the values was computed with a missing value, then
    // we have to go back and find the nearest non-missing value to do the computation
    if (*(tz+k) == spv && *(t+k) != spv) {
      // k minus
      km = -1;
      // Go back to the first non-missing value
      for (kk = k-1; kk >= 0; kk--) {
        if (*(tz+kk) != spv) {
          km = kk;
          break;
        }
      }
      // k plus
      kp = kd;
      // Go forward to the first non-missing value
      for (kk = k+1; kk < kd; kk++) {
        if (*(tz+kk) != spv) {
          kp = kk;
          break;
        }
      }

      // if k-minus and k-plus are in the range of observed levels,
      if (km >= 0 && kp < kd) {
        // assign the value to level k of the nearest neighbor (km or kp)
        if ((k-km) <= (kp-k)) {
          *(tz+k) = *(tz+km);
        } else {
          *(tz+k) = *(tz+kp);
        }
      // otherwise, handle the boundary cases
      } else if (km >= 0) {
        *(tz+k) = *(tz+km);
      } else if (kp < kd) {
        *(tz+k) = *(tz+kp);
      } else {
        *(tz+k) = spv;
      }
    }
  }

  for (k = 0; k < kd; k++) {
    if (*(tz+k) == spv && *(t+k) != spv) {
      *(tz+k) = 0.0;
    }
  }

  if (SdZ) {
    // divide tz by dz
    for (k = 0; k < kd; k++) {
      if (*(tz+k) != spv) {
        *(tz+k) /= *(dz+k);
      }
    }
  }

  if (SqRt) {
    // take sqaure root of tz
    for (k = 0; k < kd; k++) {
      if (*(tz+k) != spv) {
        if (*(tz+k) >  0.0)
          *(tz+k) = sqrt(*(tz+k));
        else
          *(tz+k) = 0.0;
      }
    }
  }
  //STEVE: I think this averages consecutive tz's to smooth out the observations
  if (kav > 1) {
    kv2 = kav / 2;
    for (k = 0; k < kd; k++) {
      if (*(tz+k) != spv) {
        km = (k-kv2) > 0 ? (k-kv2) : 0;
        cnt = 1;
        *(tw+k) = *(tz+k);
        for (kk = k-1; kk >= km; kk--) {
          if (*(tz+kk) != spv) {
            *(tw+k) += *(tz+kk);
            cnt++;
          } else {
            break;
          }
        }

        kp = (k+kv2) < kd ? (k+kv2) : kd-1;
        for (kk = k+1; kk <= kp; kk++) {
          if (*(tz+kk) != spv) {
            *(tw+k) += *(tz+kk);
            cnt++;
          } else {
            break;
          }
        }
        if (cnt) *(tw+k) /= (float)cnt;
      } else {
        *(tw+k) = spv;
      }
    }
    for (k = 0; k < kd; k++) {
      *(tz+k) = *(tw+k);
    }
  }

  tzmn = spv;
  tzmx = -spv;
  for (k = 0; k < kd; k++) {
    if (*(tz+k) != spv) {
      tzmn = tzmn < *(tz+k) ? tzmn : *(tz+k);
      tzmx = tzmx > *(tz+k) ? tzmx : *(tz+k);
    }
  }
  tzmx -= tzmn;
  if (tzmx < teps) {
    for (k = 0; k < kd; k++) {
      if (*(tz+k) != spv) {
        *(tz+k) = 0.0;
      }
    }
  } else {
    for (k = 0; k < kd; k++) {
      if (*(tz+k) != spv) {
        *(tz+k) -= tzmn;
        *(tz+k) /= tzmx;
      }
    }
  }

}

/* -------------------------------------------------------------- */


