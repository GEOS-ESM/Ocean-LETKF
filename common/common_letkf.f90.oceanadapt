MODULE common_letkf
!=======================================================================
!
! [PURPOSE:] Local Ensemble Transform Kalman Filtering (LETKF)
!            Model Independent Core Module
!
! [REFERENCES:]
!  [1] Ott et al., 2004: A local ensemble Kalman filter for atmospheric
!    data assimilation. Tellus, 56A, 415-428.
!  [2] Hunt et al., 2007: Efficient Data Assimilation for Spatiotemporal
!    Chaos: A Local Ensemble Transform Kalman Filter. Physica D, 230,
!    112-126.
!
! [HISTORY:]
!  01/21/2009 Takemasa Miyoshi  Created at U. of Maryland, College Park
!  04/26/2011 Steve Penny converted to OCEAN for use with MOM4
!
!=======================================================================
!$USE OMP_LIB
  USE common
  USE common_mtx
! use isa !STEVE: (isnan) for debugging

  IMPLICIT NONE

  PUBLIC
!=======================================================================
!  LEKF Model Independent Parameters
!=======================================================================
  INTEGER,PARAMETER :: nbv=20 !24 !20 !4 !16 !4    ! ensemble size

CONTAINS
!=======================================================================
!  Main Subroutine of LETKF Core
!   INPUT
!     nobs             : array size, but only first nobsl elements are used
!     nobsl            : total number of observation assimilated at the point
!     hdxb(nobs,nbv)   : obs operator times fcst ens perturbations
!     rdiag(nobs)      : observation error variance
!     rloc(nobs)       : localization weighting function
!     dep(nobs)        : observation departure (yo-Hxb)
!     parm_infl        : covariance inflation parameter
!   OUTPUT
!     trans(nbv,nbv) : transformation matrix
!=======================================================================
SUBROUTINE letkf_core(nobs,nobsl,hdxb,rdiag,rloc,dep,parm_infl,trans)
  IMPLICIT NONE
  INTEGER,INTENT(IN) :: nobs
  INTEGER,INTENT(IN) :: nobsl
  REAL(r_size),INTENT(IN) :: hdxb(1:nobs,1:nbv)
  REAL(r_size),INTENT(IN) :: rdiag(1:nobs)
  REAL(r_size),INTENT(IN) :: rloc(1:nobs)
  REAL(r_size),INTENT(IN) :: dep(1:nobs)
  REAL(r_size),INTENT(INOUT) :: parm_infl
  REAL(r_size),INTENT(OUT) :: trans(nbv,nbv)
  REAL(r_size) :: hdxb_rinv(nobsl,nbv)
  REAL(r_size) :: eivec(nbv,nbv)
  REAL(r_size) :: eival(nbv)
  REAL(r_size) :: pa(nbv,nbv)
  REAL(r_size) :: work1(nbv,nbv)
  REAL(r_size) :: work2(nbv,nobsl)
  REAL(r_size) :: work3(nbv)
  REAL(r_size) :: rho
  REAL(r_size) :: parm(4),sigma_o,gain
! REAL(r_size),PARAMETER :: sigma_b = 0.01d0 !(0.001d0 is the 1st and 2nd runs) !error stdev of parm_infl
  !STEVE: I put this in common so I could output it to keep in the records
  INTEGER :: i,j,k
  REAL(r_size) :: parm_in !STEVE (OCEAN)
  LOGICAL :: debug_hdxb_0 = .false.
  !STEVE: turn off inflation, but still compute adaptive inflation
  LOGICAL,PARAMETER :: USE_INFL=.true. !STEVE: make this an input argument, and use only for 2d variables

  IF(nobsl == 0) THEN
    trans = 0.0d0
    ! Grow the unobserved area to maintain smoothness in analysis field
    if (USE_INFL) then
      DO i=1,nbv
        trans(i,i) = SQRT(parm_infl)
      END DO
    endif
    RETURN
  ELSE

  !STEVE: store input inflation value  
  parm_in = parm_infl

!-----------------------------------------------------------------------
!  hdxb Rinv
!-----------------------------------------------------------------------
  !STEVE: debug
  if ( MINVAL(rdiag(1:nobsl)) .le. 0.0 ) then
    print *, "common_letkf.f90:: ERROR: rdiag ≤ 0 (i.e. there is an obserr ≤ 0)"
    print *, "nbv = ", nbv
    print *, "rdiag = ",rdiag
    stop 1
  endif
  DO j=1,nbv
    DO i=1,nobsl
      hdxb_rinv(i,j) = hdxb(i,j) / rdiag(i) * rloc(i)
    END DO
  END DO
!-----------------------------------------------------------------------
!  hdxb^T Rinv hdxb
!-----------------------------------------------------------------------
  CALL dgemm('t','n',nbv,nbv,nobsl,1.0d0,hdxb_rinv,nobsl,hdxb(1:nobsl,:),&
    & nobsl,0.0d0,work1,nbv)
!DGEMM - Performs one of the matrix-matrix operations
!     C := alpha*op( A )*op( B ) + beta*C
!     where  op( X ) is one of
!        op( X ) = X   or   op( X ) = X',
!     alpha and beta are scalars, and A, B and C are matrices,
!     with op( A ) an m by k matrix,  op( B )  a  k by n matrix
!     and  C an m by n matrix.

!  DO j=1,nbv
!    DO i=1,nbv
!      work1(i,j) = hdxb_rinv(1,i) * hdxb(1,j)
!      DO k=2,nobsl
!        work1(i,j) = work1(i,j) + hdxb_rinv(k,i) * hdxb(k,j)
!      END DO
!    END DO
!  END DO
!-----------------------------------------------------------------------
!  hdxb^T Rinv hdxb + (m-1) I / rho (covariance inflation)
!-----------------------------------------------------------------------
  if (USE_INFL) then
    rho = 1.0d0 / parm_infl
  else
    rho = 1.0d0
  endif
  DO i=1,nbv
    work1(i,i) = work1(i,i) + REAL(nbv-1,r_size) * rho
    !STEVE: error check
!   if ( isnan(work1(i,i)) ) then
!     print *, "work1(i,i) = ", work1(i,i)
!     print *, "i = ", i
!     print *, "rho = ", rho
!     stop 2
!   endif
    !STEVE: end
  END DO
!-----------------------------------------------------------------------
!  eigenvalues and eigenvectors of [ hdxb^T Rinv hdxb + (m-1) I ]
!-----------------------------------------------------------------------
  CALL mtx_eigen(1,nbv,work1,eival,eivec,i)
  !STEVE: debug
  if ( MINVAL(eival) .le. 0.0 ) then
    print *, "common_letkf.f90:: ERROR: matrix eigenvalue ≤ 0"
    print *, "eival = ", eival
    print *, "nbv = ", nbv
    print *, "i = ", i
    stop 1
  endif
  !STEVE: end
!-----------------------------------------------------------------------
!  Pa = [ hdxb^T Rinv hdxb + (m-1) I ]inv
!-----------------------------------------------------------------------
  DO j=1,nbv
    DO i=1,nbv
      work1(i,j) = eivec(i,j) / eival(j)
    END DO
  END DO
  CALL dgemm('n','t',nbv,nbv,nbv,1.0d0,work1,nbv,eivec,&
    & nbv,0.0d0,pa,nbv)
!  DO j=1,nbv
!    DO i=1,nbv
!      pa(i,j) = work1(i,1) * eivec(j,1)
!      DO k=2,nbv
!        pa(i,j) = pa(i,j) + work1(i,k) * eivec(j,k)
!      END DO
!    END DO
!  END DO
!-----------------------------------------------------------------------
!  Pa hdxb_rinv^T
!-----------------------------------------------------------------------
  CALL dgemm('n','t',nbv,nobsl,nbv,1.0d0,pa,nbv,hdxb_rinv,&
    & nobsl,0.0d0,work2,nbv)
!  DO j=1,nobsl
!    DO i=1,nbv
!      work2(i,j) = pa(i,1) * hdxb_rinv(j,1)
!      DO k=2,nbv
!        work2(i,j) = work2(i,j) + pa(i,k) * hdxb_rinv(j,k)
!      END DO
!    END DO
!  END DO
!-----------------------------------------------------------------------
!  Pa hdxb_rinv^T dep
!-----------------------------------------------------------------------
  DO i=1,nbv
    work3(i) = work2(i,1) * dep(1)
    DO j=2,nobsl
      work3(i) = work3(i) + work2(i,j) * dep(j)
    END DO
  END DO
!-----------------------------------------------------------------------
!  T = sqrt[(m-1)Pa]
!-----------------------------------------------------------------------
  DO j=1,nbv
    rho = SQRT( REAL(nbv-1,r_size) / eival(j) )
    DO i=1,nbv
      work1(i,j) = eivec(i,j) * rho
    END DO
  END DO
  CALL dgemm('n','t',nbv,nbv,nbv,1.0d0,work1,nbv,eivec,&
    & nbv,0.0d0,trans,nbv)
!  DO j=1,nbv
!    DO i=1,nbv
!      trans(i,j) = work1(i,1) * eivec(j,1)
!      DO k=2,nbv
!        trans(i,j) = trans(i,j) + work1(i,k) * eivec(j,k)
!      END DO
!    END DO
!  END DO
!-----------------------------------------------------------------------
!  T + Pa hdxb_rinv^T dep
!-----------------------------------------------------------------------
  DO j=1,nbv
    DO i=1,nbv
      trans(i,j) = trans(i,j) + work3(i)
    END DO
  END DO
!-----------------------------------------------------------------------
!  Inflation estimation
!-----------------------------------------------------------------------
  parm = 0.0d0
  DO i=1,nobsl
    parm(1) = parm(1) + dep(i)*dep(i)/rdiag(i) * rloc(i)
    !STEVE: debug
!   if ( debug_hdxb_0 .AND. isnan(parm(1)) ) then
!     print *, "i = ", i
!     print *, "parm(1) = ", parm(1) 
!     print *, "dep(i) = ", dep(i)
!     print *, "rdiag(i) = ", rdiag(i)
!     print *, "rloc(i) = ", rloc(i)
!   endif
  END DO
  DO j=1,nbv
    DO i=1,nobsl
      parm(2) = parm(2) + hdxb_rinv(i,j) * hdxb(i,j)
      !STEVE: debug
!     if ( debug_hdxb_0 .AND. (isnan(parm(2)) .OR. parm(2) == 0) ) then
!       print *, "i = ", i
!       print *, "j = ", j
!       print *, "parm(2) = ", parm(2) 
!       print *, "hdxb_rinv(i,j) = ", hdxb_rinv(i,j)
!       print *, "hdxb(i,j) = ", hdxb(i,j)
!       print *, "rloc(i) = ", rloc(i)
!     endif
    END DO
  END DO
  parm(2) = parm(2) / REAL(nbv-1,r_size)
  parm(3) = SUM(rloc(1:nobsl))
  parm(4) = (parm(1)-parm(3))/parm(2) - parm_infl
!  sigma_o = 1.0d0/REAL(nobsl,r_size)/MAXVAL(rloc(1:nobsl))
  sigma_o = 2.0d0/parm(3)*((parm_infl*parm(2)+parm(3))/parm(2))**2
  gain = sigma_b**2 / (sigma_o + sigma_b**2)
  parm_infl = parm_infl + gain * parm(4)
  !STEVE: debug
  if ( isnan(parm_infl) ) then
!   print *, "parm_infl = ", parm_infl
!   if ( debug_hdxb_0 ) then
!     print *, "sigma_b = ", sigma_b
!     print *, "gain = ", gain
!     print *, "parm(1) = ", parm(1)
!     print *, "parm(2) = ", parm(2)
!     print *, "parm(3) = ", parm(3)
!     print *, "parm(4) = ", parm(4)
!     print *, "Setting parm(4) = 0"
!     print *, "and parm_infl = parm_in + gain * parm_in"
!   endif
    parm_infl = parm_in + gain * parm_in
!   print *, "new parm_infl = ", parm_infl
  endif

  RETURN

  END IF
END SUBROUTINE letkf_core

END MODULE common_letkf
