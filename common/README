!STEVE: this is a potential correction to letkf_core.f90:

! OLD:

!-----------------------------------------------------------------------
!  hdxb Rinv
!-----------------------------------------------------------------------
  !STEVE: debug
  if ( MINVAL(rdiag(1:nobsl)) .le. 0.0 ) then
    print *, "common_letkf.f90:: ERROR: rdiag ≤ 0 (i.e. there is an obserr ≤ 0)"
    print *, "nbv = ", nbv
    print *, "rdiag = ",rdiag
    stop 1
  endif
  DO j=1,nbv
    DO i=1,nobsl
      hdxb_rinv(i,j) = hdxb(i,j) / rdiag(i) * rloc(i)
    END DO
  END DO
!-----------------------------------------------------------------------
!  hdxb^T Rinv hdxb
!-----------------------------------------------------------------------
  CALL dgemm('t','n',nbv,nbv,nobsl,1.0d0,hdxb_rinv,nobsl,hdxb(1:nobsl,:),&
    & nobsl,0.0d0,work1,nbv)
!DGEMM - Performs one of the matrix-matrix operations
!     C := alpha*op( A )*op( B ) + beta*C
!     where  op( X ) is one of
!        op( X ) = X   or   op( X ) = X',
!     alpha and beta are scalars, and A, B and C are matrices,
!     with op( A ) an m by k matrix,  op( B )  a  k by n matrix
!     and  C an m by n matrix.

! NEW:
!SUBROUTINE DSYRK ( UPLO, TRANS, N, K, ALPHA, A, LDA, BETA, C, LDC )
!          CHARACTER*1  UPLO, TRANS
!          INTEGER      N, K, LDA, LDC
!          DOUBLE       PRECISION ALPHA, BETA
!          DOUBLE       PRECISION A( LDA, * ), C( LDC, * )
!
!      DSYRK  performs one of the symmetric rank k operations
!        C := alpha*A'*A + beta*C,
!
!     where  alpha and beta  are scalars, C is an  n by n  sym-
!     metric matrix and  A  is an  n by k  matrix in the first
!     case and a  k by n  matrix in the second case.

!CALL dgemm('t','n',nbv,nbv,nobsl,1.0d0,hdxb_rinv,nobsl,hdxb(1:nobsl,:),nobsl,0.0d0,work1,nbv)
CALL dsyrk('L','T',nbv,nobsl,1.0d0,hdxb_rinv,nbv,1.0d0,work1,0.0d0)

! Then fill in the strictly upper diagonal part with the entries from the lower diagonal:
do ri=1,nbv
  do ci=ri+1,nbv
    work1(ri,ci) = work1(ci,ri)
  enddo
enddo


